(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{608:function(t,s,a){"use strict";a.r(s);var r=a(17),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"理论基础-没有这些概念-做题的时候可能会拿不准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论基础-没有这些概念-做题的时候可能会拿不准"}},[t._v("#")]),t._v(" 理论基础 没有这些概念 做题的时候可能会拿不准")]),t._v(" "),a("h2",{attrs:{id:"什么是满二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是满二叉树"}},[t._v("#")]),t._v(" 什么是满二叉树？")]),t._v(" "),a("p",[t._v("k 是高度\n节点总数等于 2^k-1 比如 k=3 节点总数为 7 （1 23 4567 ）")]),t._v(" "),a("h2",{attrs:{id:"什么是完全二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是完全二叉树"}},[t._v("#")]),t._v(" 什么是完全二叉树？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("是除了底层以外，其他层都是满的 ， 并且底层从左到右底部 是连续的 ， 断开的情况不是完全二叉树")])]),t._v(" "),a("li",[a("p",[t._v("堆就是一个完全二叉树（实现堆的时候， 就要明确什么是完全二叉树）")])]),t._v(" "),a("li",[a("p",[t._v("堆又分 MaxHeap or MinHeap")])]),t._v(" "),a("li",[a("p",[t._v("优先级队列可以用堆来实现")])]),t._v(" "),a("li",[a("p",[t._v("所以满二叉树一定是完全二叉树")])])]),t._v(" "),a("h2",{attrs:{id:"bst-二叉搜索树-节点有顺序的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bst-二叉搜索树-节点有顺序的"}},[t._v("#")]),t._v(" BST(二叉搜索树) 节点有顺序的，")]),t._v(" "),a("ul",[a("li",[t._v("左子树所有节点小于根节点的值")]),t._v(" "),a("li",[t._v("右子树所有节点大于根节点的值")]),t._v(" "),a("li",[t._v("子树本身也符和上面两点")])]),t._v(" "),a("h2",{attrs:{id:"平衡二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉搜索树"}},[t._v("#")]),t._v(" 平衡二叉搜索树")]),t._v(" "),a("ul",[a("li",[t._v("左右子树高度差不大于 1")])]),t._v(" "),a("h2",{attrs:{id:"存储方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储方式"}},[t._v("#")]),t._v(" 存储方式")]),t._v(" "),a("ul",[a("li",[t._v("顺序存储 i*2+1 的下标对应左孩子， i*2+2 对应右孩子")]),t._v(" "),a("li",[t._v("链式存储")])]),t._v(" "),a("h2",{attrs:{id:"如何传入一个二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何传入一个二叉树"}},[t._v("#")]),t._v(" 如何传入一个二叉树？")]),t._v(" "),a("ul",[a("li",[t._v("根节点指向左右子节点")]),t._v(" "),a("li",[t._v("传入根节点，就可以代表整个树")])]),t._v(" "),a("h2",{attrs:{id:"二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),a("blockquote",[a("p",[t._v("两种方式")])]),t._v(" "),a("ul",[a("li",[t._v("1 DFS\n-1.1 dfs inorder\n-1.2 dfs postorder\n-1.3 dfs preorder")]),t._v(" "),a("li",[t._v("2 BFS(也可以叫 level order traversal )")])]),t._v(" "),a("h2",{attrs:{id:"leetcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode"}},[t._v("#")]),t._v(" Leetcode")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("104 max depth done post order 的使用")])]),t._v(" "),a("li",[a("p",[t._v("542 二叉树的直径 done 建立 在 104 基础上 diameter = Math.max(l + r, diameter) dfs post order 仅用来遍历使用 但需要返回 depth")])]),t._v(" "),a("li",[a("p",[t._v("144 二叉树的前序遍历 done stack 的使用")])]),t._v(" "),a("li",[a("p",[t._v("559 n arry max depth")])])]),t._v(" "),a("h2",{attrs:{id:"如何升序打印-bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何升序打印-bst"}},[t._v("#")]),t._v(" 如何升序打印 Bst?")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inorder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//left root right")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);