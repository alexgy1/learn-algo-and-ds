(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{589:function(t,a,s){"use strict";s.r(a);var e=s(17),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"method-1-dfs-traversal-graph"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-1-dfs-traversal-graph"}},[t._v("#")]),t._v(" method 1 dfs traversal graph")]),t._v(" "),s("ul",[s("li",[t._v("time compliexty O(n)")]),t._v(" "),s("li",[t._v("data structors : hashSet 避免来回走")]),t._v(" "),s("li",[t._v("use recursive")])]),t._v(" "),s("h2",{attrs:{id:"mehotd-2-dfs-level-orde-trvaersal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mehotd-2-dfs-level-orde-trvaersal"}},[t._v("#")]),t._v(" mehotd 2 dfs (level orde trvaersal )")]),t._v(" "),s("ul",[s("li",[t._v("time compliexty O(n)")]),t._v(" "),s("li",[t._v("data structors : hashSet and queue")]),t._v(" "),s("li",[t._v("use iterative")])]),t._v(" "),s("h2",{attrs:{id:"method-3-union-find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-3-union-find"}},[t._v("#")]),t._v(" method 3 union-find")]),t._v(" "),s("ul",[s("li",[t._v("time compliexty O(nlogN)")]),t._v(" "),s("li",[t._v("data structors : forest of trees")])]),t._v(" "),s("h2",{attrs:{id:"method4-topological-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method4-topological-sort"}},[t._v("#")]),t._v(" method4 topological sort")]),t._v(" "),s("ul",[s("li",[t._v("time compliexty O(n)")]),t._v(" "),s("li",[t._v("data structors : hashSet")]),t._v(" "),s("li",[t._v("build on top of dfs")]),t._v(" "),s("li",[t._v("with a directed graph 课程安排")])]),t._v(" "),s("h2",{attrs:{id:"method4-dijkstra-s-shortest-path-algo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method4-dijkstra-s-shortest-path-algo"}},[t._v("#")]),t._v(" method4 dijkstra's shortest path algo")]),t._v(" "),s("ul",[s("li",[t._v("time compliexty O(E logV)")]),t._v(" "),s("li",[t._v("data structors : heap to find min path hastset")])]),t._v(" "),s("h2",{attrs:{id:"prim-s-minimum-spanning-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prim-s-minimum-spanning-tree"}},[t._v("#")]),t._v(" prim's (Minimum spanning tree )")]),t._v(" "),s("h2",{attrs:{id:"floyd-warshall-s-algo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floyd-warshall-s-algo"}},[t._v("#")]),t._v(" floyd warshall's algo")])])}),[],!1,null,null,null);a.default=r.exports}}]);